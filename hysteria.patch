diff --git a/app/cmd/client.go b/app/cmd/client.go
index 65bc7e0..e731e83 100644
--- a/app/cmd/client.go
+++ b/app/cmd/client.go
@@ -14,6 +14,7 @@ import (
 	"slices"
 	"strconv"
 	"strings"
+	"sync"
 	"syscall"
 	"time"
 
@@ -39,7 +40,9 @@ import (
 
 // Client flags
 var (
-	showQR bool
+	showQR                bool
+	socks5ServerInstances map[string]*socks5.Server // Track instances by listen address (using pointers)
+	socks5ServerMutex     sync.RWMutex              // Protect the instances map
 )
 
 var clientCmd = &cobra.Command{
@@ -445,11 +448,12 @@ func runClient(cmd *cobra.Command, args []string) {
 	logger.Info("client mode")
 
 	if err := viper.ReadInConfig(); err != nil {
-		logger.Fatal("failed to read client config", zap.Error(err))
+		logger.Error("failed to read client config", zap.Error(err))
 	}
+
 	var config clientConfig
 	if err := viper.Unmarshal(&config); err != nil {
-		logger.Fatal("failed to parse client config", zap.Error(err))
+		logger.Error("failed to parse client config", zap.Error(err))
 	}
 
 	c, err := client.NewReconnectableClient(
@@ -465,7 +469,8 @@ func runClient(cmd *cobra.Command, args []string) {
 			}
 		}, config.Lazy)
 	if err != nil {
-		logger.Fatal("failed to initialize client", zap.Error(err))
+		logger.Error("failed to initialize client", zap.Error(err))
+		return
 	}
 	defer c.Close()
 
@@ -536,14 +541,35 @@ func runClient(cmd *cobra.Command, args []string) {
 		} else {
 			_ = c.Close() // Close the client here as Fatal will exit the program without running defer
 			if r.Err != nil {
-				logger.Fatal(r.Msg, zap.Error(r.Err))
+				logger.Error(r.Msg, zap.Error(r.Err))
 			} else {
-				logger.Fatal(r.Msg)
+				logger.Error(r.Msg)
 			}
 		}
 	}
 }
 
+func stopClient() {
+	// Stop all instances for backwards compatibility
+	socks5ServerMutex.Lock()
+	defer socks5ServerMutex.Unlock()
+	for listenAddr, server := range socks5ServerInstances {
+		logger.Info("Stopping SOCKS5 server instance", zap.String("listen", listenAddr))
+		server.Stop()
+		delete(socks5ServerInstances, listenAddr)
+	}
+}
+
+func stopClientByPort(listenAddr string) {
+	socks5ServerMutex.Lock()
+	defer socks5ServerMutex.Unlock()
+	if server, exists := socks5ServerInstances[listenAddr]; exists {
+		logger.Info("Stopping SOCKS5 server instance", zap.String("listen", listenAddr))
+		server.Stop()
+		delete(socks5ServerInstances, listenAddr)
+	}
+}
+
 type clientModeRunner struct {
 	ModeMap map[string]func() error
 }
@@ -612,6 +638,15 @@ func clientSOCKS5(config socks5Config, c client.Client) error {
 		EventLogger: &socks5Logger{},
 	}
 	logger.Info("SOCKS5 server listening", zap.String("addr", config.Listen))
+
+	// Store the server instance by listen address
+	socks5ServerMutex.Lock()
+	if socks5ServerInstances == nil {
+		socks5ServerInstances = make(map[string]*socks5.Server)
+	}
+	socks5ServerInstances[config.Listen] = &s
+	socks5ServerMutex.Unlock()
+
 	return s.Serve(l)
 }
 
diff --git a/app/cmd/ping.go b/app/cmd/ping.go
index db45052..ca802c1 100644
--- a/app/cmd/ping.go
+++ b/app/cmd/ping.go
@@ -26,25 +26,25 @@ func runPing(cmd *cobra.Command, args []string) {
 	logger.Info("ping mode")
 
 	if len(args) != 1 {
-		logger.Fatal("must specify one and only one address")
+		logger.Error("must specify one and only one address")
 	}
 	addr := args[0]
 
 	if err := viper.ReadInConfig(); err != nil {
-		logger.Fatal("failed to read client config", zap.Error(err))
+		logger.Error("failed to read client config", zap.Error(err))
 	}
 	var config clientConfig
 	if err := viper.Unmarshal(&config); err != nil {
-		logger.Fatal("failed to parse client config", zap.Error(err))
+		logger.Error("failed to parse client config", zap.Error(err))
 	}
 	hyConfig, err := config.Config()
 	if err != nil {
-		logger.Fatal("failed to load client config", zap.Error(err))
+		logger.Error("failed to load client config", zap.Error(err))
 	}
 
 	c, info, err := client.NewClient(hyConfig)
 	if err != nil {
-		logger.Fatal("failed to initialize client", zap.Error(err))
+		logger.Error("failed to initialize client", zap.Error(err))
 	}
 	defer c.Close()
 	logger.Info("connected to server",
@@ -55,7 +55,7 @@ func runPing(cmd *cobra.Command, args []string) {
 	start := time.Now()
 	conn, err := c.TCP(addr)
 	if err != nil {
-		logger.Fatal("failed to connect", zap.Error(err), zap.String("time", time.Since(start).String()))
+		logger.Error("failed to connect", zap.Error(err), zap.String("time", time.Since(start).String()))
 	}
 	defer conn.Close()
 
diff --git a/app/cmd/root.go b/app/cmd/root.go
index 13f9705..b2c7024 100644
--- a/app/cmd/root.go
+++ b/app/cmd/root.go
@@ -105,6 +105,25 @@ func Execute() {
 	}
 }
 
+func Start(configPath string) {
+	args := []string{"--disable-update-check"}
+
+	if configPath != "" {
+		args = append(args, "--config", configPath)
+	}
+
+	rootCmd.SetArgs(args)
+	_ = rootCmd.Execute()
+}
+
+func Stop() {
+	stopClient()
+}
+
+func StopByPort(listenAddr string) {
+	stopClientByPort(listenAddr)
+}
+
 func init() {
 	initFlags()
 	cobra.MousetrapHelpText = "" // Disable the mousetrap so Windows users can run the exe directly by double-clicking
@@ -136,12 +155,12 @@ func initLogger() {
 	level, ok := logLevelMap[strings.ToLower(logLevel)]
 	if !ok {
 		fmt.Printf("unsupported log level: %s\n", logLevel)
-		os.Exit(1)
+		return
 	}
 	enc, ok := logFormatMap[strings.ToLower(logFormat)]
 	if !ok {
 		fmt.Printf("unsupported log format: %s\n", logFormat)
-		os.Exit(1)
+		return
 	}
 	c := zap.Config{
 		Level:             zap.NewAtomicLevelAt(level),
@@ -156,7 +175,7 @@ func initLogger() {
 	logger, err = c.Build()
 	if err != nil {
 		fmt.Printf("failed to initialize logger: %s\n", err)
-		os.Exit(1)
+		return
 	}
 }
 
diff --git a/app/cmd/server.go b/app/cmd/server.go
index a2aa9a4..9c8e15e 100644
--- a/app/cmd/server.go
+++ b/app/cmd/server.go
@@ -922,20 +922,20 @@ func runServer(cmd *cobra.Command, args []string) {
 	logger.Info("server mode")
 
 	if err := viper.ReadInConfig(); err != nil {
-		logger.Fatal("failed to read server config", zap.Error(err))
+		logger.Error("failed to read server config", zap.Error(err))
 	}
 	var config serverConfig
 	if err := viper.Unmarshal(&config); err != nil {
-		logger.Fatal("failed to parse server config", zap.Error(err))
+		logger.Error("failed to parse server config", zap.Error(err))
 	}
 	hyConfig, err := config.Config()
 	if err != nil {
-		logger.Fatal("failed to load server config", zap.Error(err))
+		logger.Error("failed to load server config", zap.Error(err))
 	}
 
 	s, err := server.NewServer(hyConfig)
 	if err != nil {
-		logger.Fatal("failed to initialize server", zap.Error(err))
+		logger.Error("failed to initialize server", zap.Error(err))
 	}
 	if config.Listen != "" {
 		logger.Info("server up and running", zap.String("listen", config.Listen))
@@ -948,14 +948,14 @@ func runServer(cmd *cobra.Command, args []string) {
 	}
 
 	if err := s.Serve(); err != nil {
-		logger.Fatal("failed to serve", zap.Error(err))
+		logger.Error("failed to serve", zap.Error(err))
 	}
 }
 
 func runTrafficStatsServer(listen string, handler http.Handler) {
 	logger.Info("traffic stats server up and running", zap.String("listen", listen))
 	if err := correctnet.HTTPListenAndServe(listen, handler); err != nil {
-		logger.Fatal("failed to serve traffic stats", zap.Error(err))
+		logger.Error("failed to serve traffic stats", zap.Error(err))
 	}
 }
 
@@ -975,7 +975,7 @@ func runMasqTCPServer(s *masq.MasqTCPServer, httpAddr, httpsAddr string) {
 	}
 	err := <-errChan
 	if err != nil {
-		logger.Fatal("failed to serve masquerade HTTP(S)", zap.Error(err))
+		logger.Error("failed to serve masquerade HTTP(S)", zap.Error(err))
 	}
 }
 
diff --git a/app/cmd/speedtest.go b/app/cmd/speedtest.go
index f5c37fb..0165d9d 100644
--- a/app/cmd/speedtest.go
+++ b/app/cmd/speedtest.go
@@ -51,20 +51,20 @@ func runSpeedtest(cmd *cobra.Command, args []string) {
 	logger.Info("speed test mode")
 
 	if err := viper.ReadInConfig(); err != nil {
-		logger.Fatal("failed to read client config", zap.Error(err))
+		logger.Error("failed to read client config", zap.Error(err))
 	}
 	var config clientConfig
 	if err := viper.Unmarshal(&config); err != nil {
-		logger.Fatal("failed to parse client config", zap.Error(err))
+		logger.Error("failed to parse client config", zap.Error(err))
 	}
 	hyConfig, err := config.Config()
 	if err != nil {
-		logger.Fatal("failed to load client config", zap.Error(err))
+		logger.Error("failed to load client config", zap.Error(err))
 	}
 
 	c, info, err := client.NewClient(hyConfig)
 	if err != nil {
-		logger.Fatal("failed to initialize client", zap.Error(err))
+		logger.Error("failed to initialize client", zap.Error(err))
 	}
 	defer c.Close()
 	logger.Info("connected to server",
@@ -99,9 +99,9 @@ func runDownloadTest(c client.Client) {
 	downConn, err := c.TCP(speedtestAddr)
 	if err != nil {
 		if errors.As(err, &hyErrors.DialError{}) {
-			logger.Fatal("failed to connect (server may not support speed test)", zap.Error(err))
+			logger.Error("failed to connect (server may not support speed test)", zap.Error(err))
 		} else {
-			logger.Fatal("failed to connect", zap.Error(err))
+			logger.Error("failed to connect", zap.Error(err))
 		}
 	}
 	defer downConn.Close()
@@ -122,7 +122,7 @@ func runDownloadTest(c client.Client) {
 		}
 	})
 	if err != nil {
-		logger.Fatal("download test failed", zap.Error(err))
+		logger.Error("download test failed", zap.Error(err))
 	}
 	logger.Info("download test complete")
 }
@@ -132,9 +132,9 @@ func runUploadTest(c client.Client) {
 	upConn, err := c.TCP(speedtestAddr)
 	if err != nil {
 		if errors.As(err, &hyErrors.DialError{}) {
-			logger.Fatal("failed to connect (server may not support speed test)", zap.Error(err))
+			logger.Error("failed to connect (server may not support speed test)", zap.Error(err))
 		} else {
-			logger.Fatal("failed to connect", zap.Error(err))
+			logger.Error("failed to connect", zap.Error(err))
 		}
 	}
 	defer upConn.Close()
@@ -155,7 +155,7 @@ func runUploadTest(c client.Client) {
 		}
 	})
 	if err != nil {
-		logger.Fatal("upload test failed", zap.Error(err))
+		logger.Error("upload test failed", zap.Error(err))
 	}
 	logger.Info("upload test complete")
 }
diff --git a/app/cmd/update.go b/app/cmd/update.go
index 11eadd0..43f8d86 100644
--- a/app/cmd/update.go
+++ b/app/cmd/update.go
@@ -37,7 +37,7 @@ func runCheckUpdate(cmd *cobra.Command, args []string) {
 	checker := utils.NewServerUpdateChecker(appVersion, appPlatform, appArch, appType)
 	resp, err := checker.Check()
 	if err != nil {
-		logger.Fatal("failed to check for updates", zap.Error(err))
+		logger.Error("failed to check for updates", zap.Error(err))
 	}
 	if resp.HasUpdate {
 		logger.Info("update available",
diff --git a/app/internal/socks5/server.go b/app/internal/socks5/server.go
index 0fc7de6..7a00aec 100644
--- a/app/internal/socks5/server.go
+++ b/app/internal/socks5/server.go
@@ -7,6 +7,8 @@ import (
 
 	"github.com/txthinking/socks5"
 
+	"sync"
+
 	"github.com/apernet/hysteria/core/v2/client"
 )
 
@@ -18,6 +20,10 @@ type Server struct {
 	AuthFunc    func(username, password string) bool // nil = no authentication
 	DisableUDP  bool
 	EventLogger EventLogger
+
+	mu       sync.Mutex
+	stop     bool
+	listener net.Listener
 }
 
 type EventLogger interface {
@@ -28,15 +34,44 @@ type EventLogger interface {
 }
 
 func (s *Server) Serve(listener net.Listener) error {
+	s.mu.Lock()
+	s.listener = listener
+	s.mu.Unlock()
+
 	for {
+		s.mu.Lock()
+		stop := s.stop
+		s.mu.Unlock()
+
+		if stop {
+			_ = listener.Close()
+			return nil
+		}
+
 		conn, err := listener.Accept()
 		if err != nil {
+			// Check if error is due to stopping
+			s.mu.Lock()
+			stopping := s.stop
+			s.mu.Unlock()
+			if stopping {
+				return nil // Clean exit when stopped
+			}
 			return err
 		}
 		go s.dispatch(conn)
 	}
 }
 
+func (s *Server) Stop() {
+	s.mu.Lock()
+	s.stop = true
+	if s.listener != nil {
+		_ = s.listener.Close() // Force immediate closure
+	}
+	s.mu.Unlock()
+}
+
 func (s *Server) dispatch(conn net.Conn) {
 	ok, _ := s.negotiate(conn)
 	if !ok {
diff --git a/app/main.go b/app/main.go
index 81d8168..5276507 100644
--- a/app/main.go
+++ b/app/main.go
@@ -1,4 +1,4 @@
-package main
+package app
 
 import "github.com/apernet/hysteria/app/v2/cmd"
 
